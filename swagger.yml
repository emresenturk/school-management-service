openapi: 3.0.0
info:
  version: 1.0.0
  title: School Management System
  description: School Management System API
components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: token
tags:
  - name: Classroom
  - name: School
  - name: Student
  - name: User
  
paths:

## Classroom APIs ##
  /api/classroom/create:
    post:
      summary: Create a new classroom in you school, you have to be a school admin to create a classroom
      tags:
        - Classroom
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
              example:
                label: 12C
      responses:
        '200':
          description: Created successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized 

  /api/classroom/read:
    get:
      summary: Get all the classrooms of your school
      tags:
        - Classroom
      security:
        - api_key: []
      responses:
        '200':
          description: Successful request
        '400':
          description: Bad request
        '401':
          description: Unauthorized 

  /api/classroom/delete:
    delete:
      summary: Delete a classroom by its label from your school
      tags:
        - Classroom
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
              example:
                label: 12C
      responses:
        '200':
          description: Successful request
        '400':
          description: Bad request
        '401':
          description: Unauthorized 
      

## School APIs ##
  /api/school/create:
    post:
      summary: Create a new school, you need to be a super admin to do that 
      tags:
        - School
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                url:
                  type: string
              example:
                name: BOUN
                address: Istanbul, Turkey
                url: boun.edu.tr
      responses:
        '200':
          description: Created successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized 

  /api/school/read/{name}:
    get:
      summary: Read a school info by its name
      tags:
        - School
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          example: BOUN
      responses:
        '200':
          description: Request successful
        '400':
          description: Bad request

  /api/school/update/:
    patch:
      summary: Find a school by its name and update its url and/or address
      tags:
        - School
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                url:
                  type: string
              example:
                name: BOUN
                address: Istanbul, Turkey
                url: boun.edu.tr
      responses:
        '200':
          description: Response successful
        '400':
          description: Bad request
        '401':
          description: Unauthorized 

  /api/school/delete/{name}:
    delete:
      summary: Delete a school by its name, you must be a super admin
      tags:
        - School
      security:
        - api_key: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          example: BOUN
      responses:
        '200':
          description: Request successful
        '400':
          description: Bad request
        '401':
          description: Unauthorized


## User & tokens APIs ##
  /api/user/createUser:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
              example:
                email: 'temp@mail.com'
                password: '********'
                username: John Doe
      responses:
        '200':
          description: Created successfully
        '400':
          description: Bad request

  /api/user/loginUser:
    post:
      summary: Login using registered user credentials
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: 'temp@mail.com'
                password: '********'
      responses:
        '200':
          description: Logged in successfully
        '400':
          description: Bad request

  /api/user/updateUserAccessRights:
    post:
      summary: update the user access right, if you are a super admin
      tags:
        - User
      security:
        - api_key: []
      requestBody:
        description: 'user access rights: "user" => no admin rights, "school:${schhol_name}" => school admin, "super" => super admin'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                accessRights:
                  type: string
              example:
                email: 'temp@mail.com'
                accessRights: user
      responses:
        '200':
          description: Successful request
        '400':
          description: Bad request
        '401':
          description: Unauthorized 


  /api/token/v1_createShortToken:
    post:
      summary: Generate a short token
      tags:
        - User
      security:
        - api_key: []
      responses:
        '200':
          description: Token generated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized 